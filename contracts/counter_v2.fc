#include "imports/stdlib.fc";
const op::increase = "op::increase"c;
const op::decrease = "op::decrease"c;

;; ===================== 说明 =====================
;;
;; 改写默认的 counter 合约，
;; 1. 将 2 个 global int 变量去掉，就用 get_data()/set_data(）
;; 2. 新增一个 op::decrease，用于减少
;;
;; ===================== 说明 =====================

;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
;; src:MsgAddressInt dest:MsgAddressInt
;; value:CurrencyCollection ihr_fee:Grams fwd_fee:Grams
;; created_lt:uint64 created_at:uint32 = CommonMsgInfo;

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; 忽略处理消息体为空的消息（TON 转账可以正常入账）
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4); ;;0 ihr_disabled bounce bounced 共 4 位
    if (flags & 1) {
        return ();
    }


    ;; in_msg_body 的格式是自定义的，
    ;; 但通常会遵循以下惯例，以确保消息在智能合约中易于解析：
    ;; in_msg_body ::= op:uint32 query_id:uint64 payload:(optional)
    int op = in_msg_body~load_uint(32);
    in_msg_body~skip_bits(64);  ;;query_id

    if (op == op::increase) {
        int increase_by = in_msg_body~load_uint(32);

        var ds = get_data().begin_parse();
        int id = ds~load_uint(32);
        int counter = ds~load_uint(32);
        counter += increase_by;

        set_data(
            begin_cell()
                .store_uint(id, 32)
                .store_uint(counter, 32)
                .end_cell()
        );

        return ();
    }

    if (op == op::decrease) {
        int decrease_by = in_msg_body~load_uint(32);

        var ds = get_data().begin_parse();
        int id = ds~load_uint(32);
        int counter = ds~load_uint(32);
        counter -= decrease_by;

        set_data(
            begin_cell()
                .store_uint(id, 32)
                .store_uint(counter, 32)
                .end_cell()
        );

        return ();
    }

    throw(0xffff);

}


int get_id() method_id {
    var ds = get_data().begin_parse();
    return ds~load_uint(32);
}

int get_counter() method_id {
    var ds = get_data().begin_parse();
    ds~skip_bits(32);
    return ds~load_uint(32);
}

